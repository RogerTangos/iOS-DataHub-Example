/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "datahub.h"

@implementation ConnectionParams

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClient_id: (NSString *) client_id seq_id: (NSString *) seq_id user: (NSString *) user password: (NSString *) password repo_base: (NSString *) repo_base
{
  self = [super init];
  __client_id = [client_id retain_stub];
  __client_id_isset = YES;
  __seq_id = [seq_id retain_stub];
  __seq_id_isset = YES;
  __user = [user retain_stub];
  __user_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  __repo_base = [repo_base retain_stub];
  __repo_base_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"client_id"])
  {
    __client_id = [[decoder decodeObjectForKey: @"client_id"] retain_stub];
    __client_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"seq_id"])
  {
    __seq_id = [[decoder decodeObjectForKey: @"seq_id"] retain_stub];
    __seq_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"user"])
  {
    __user = [[decoder decodeObjectForKey: @"user"] retain_stub];
    __user_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"repo_base"])
  {
    __repo_base = [[decoder decodeObjectForKey: @"repo_base"] retain_stub];
    __repo_base_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__client_id_isset)
  {
    [encoder encodeObject: __client_id forKey: @"client_id"];
  }
  if (__seq_id_isset)
  {
    [encoder encodeObject: __seq_id forKey: @"seq_id"];
  }
  if (__user_isset)
  {
    [encoder encodeObject: __user forKey: @"user"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__repo_base_isset)
  {
    [encoder encodeObject: __repo_base forKey: @"repo_base"];
  }
}

- (void) dealloc
{
  [__client_id release_stub];
  [__seq_id release_stub];
  [__user release_stub];
  [__password release_stub];
  [__repo_base release_stub];
  [super dealloc_stub];
}

- (NSString *) client_id {
  return [[__client_id retain_stub] autorelease_stub];
}

- (void) setClient_id: (NSString *) client_id {
  [client_id retain_stub];
  [__client_id release_stub];
  __client_id = client_id;
  __client_id_isset = YES;
}

- (BOOL) client_idIsSet {
  return __client_id_isset;
}

- (void) unsetClient_id {
  [__client_id release_stub];
  __client_id = nil;
  __client_id_isset = NO;
}

- (NSString *) seq_id {
  return [[__seq_id retain_stub] autorelease_stub];
}

- (void) setSeq_id: (NSString *) seq_id {
  [seq_id retain_stub];
  [__seq_id release_stub];
  __seq_id = seq_id;
  __seq_id_isset = YES;
}

- (BOOL) seq_idIsSet {
  return __seq_id_isset;
}

- (void) unsetSeq_id {
  [__seq_id release_stub];
  __seq_id = nil;
  __seq_id_isset = NO;
}

- (NSString *) user {
  return [[__user retain_stub] autorelease_stub];
}

- (void) setUser: (NSString *) user {
  [user retain_stub];
  [__user release_stub];
  __user = user;
  __user_isset = YES;
}

- (BOOL) userIsSet {
  return __user_isset;
}

- (void) unsetUser {
  [__user release_stub];
  __user = nil;
  __user_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (NSString *) repo_base {
  return [[__repo_base retain_stub] autorelease_stub];
}

- (void) setRepo_base: (NSString *) repo_base {
  [repo_base retain_stub];
  [__repo_base release_stub];
  __repo_base = repo_base;
  __repo_base_isset = YES;
}

- (BOOL) repo_baseIsSet {
  return __repo_base_isset;
}

- (void) unsetRepo_base {
  [__repo_base release_stub];
  __repo_base = nil;
  __repo_base_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClient_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSeq_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRepo_base: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ConnectionParams"];
  if (__client_id_isset) {
    if (__client_id != nil) {
      [outProtocol writeFieldBeginWithName: @"client_id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __client_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__seq_id_isset) {
    if (__seq_id != nil) {
      [outProtocol writeFieldBeginWithName: @"seq_id" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __seq_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_isset) {
    if (__user != nil) {
      [outProtocol writeFieldBeginWithName: @"user" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __user];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__repo_base_isset) {
    if (__repo_base != nil) {
      [outProtocol writeFieldBeginWithName: @"repo_base" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __repo_base];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ConnectionParams("];
  [ms appendString: @"client_id:"];
  [ms appendFormat: @"\"%@\"", __client_id];
  [ms appendString: @",seq_id:"];
  [ms appendFormat: @"\"%@\"", __seq_id];
  [ms appendString: @",user:"];
  [ms appendFormat: @"\"%@\"", __user];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",repo_base:"];
  [ms appendFormat: @"\"%@\"", __repo_base];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Connection

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClient_id: (NSString *) client_id seq_id: (NSString *) seq_id user: (NSString *) user repo_base: (NSString *) repo_base cursor: (int64_t) cursor
{
  self = [super init];
  __client_id = [client_id retain_stub];
  __client_id_isset = YES;
  __seq_id = [seq_id retain_stub];
  __seq_id_isset = YES;
  __user = [user retain_stub];
  __user_isset = YES;
  __repo_base = [repo_base retain_stub];
  __repo_base_isset = YES;
  __cursor = cursor;
  __cursor_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"client_id"])
  {
    __client_id = [[decoder decodeObjectForKey: @"client_id"] retain_stub];
    __client_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"seq_id"])
  {
    __seq_id = [[decoder decodeObjectForKey: @"seq_id"] retain_stub];
    __seq_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"user"])
  {
    __user = [[decoder decodeObjectForKey: @"user"] retain_stub];
    __user_isset = YES;
  }
  if ([decoder containsValueForKey: @"repo_base"])
  {
    __repo_base = [[decoder decodeObjectForKey: @"repo_base"] retain_stub];
    __repo_base_isset = YES;
  }
  if ([decoder containsValueForKey: @"cursor"])
  {
    __cursor = [decoder decodeInt64ForKey: @"cursor"];
    __cursor_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__client_id_isset)
  {
    [encoder encodeObject: __client_id forKey: @"client_id"];
  }
  if (__seq_id_isset)
  {
    [encoder encodeObject: __seq_id forKey: @"seq_id"];
  }
  if (__user_isset)
  {
    [encoder encodeObject: __user forKey: @"user"];
  }
  if (__repo_base_isset)
  {
    [encoder encodeObject: __repo_base forKey: @"repo_base"];
  }
  if (__cursor_isset)
  {
    [encoder encodeInt64: __cursor forKey: @"cursor"];
  }
}

- (void) dealloc
{
  [__client_id release_stub];
  [__seq_id release_stub];
  [__user release_stub];
  [__repo_base release_stub];
  [super dealloc_stub];
}

- (NSString *) client_id {
  return [[__client_id retain_stub] autorelease_stub];
}

- (void) setClient_id: (NSString *) client_id {
  [client_id retain_stub];
  [__client_id release_stub];
  __client_id = client_id;
  __client_id_isset = YES;
}

- (BOOL) client_idIsSet {
  return __client_id_isset;
}

- (void) unsetClient_id {
  [__client_id release_stub];
  __client_id = nil;
  __client_id_isset = NO;
}

- (NSString *) seq_id {
  return [[__seq_id retain_stub] autorelease_stub];
}

- (void) setSeq_id: (NSString *) seq_id {
  [seq_id retain_stub];
  [__seq_id release_stub];
  __seq_id = seq_id;
  __seq_id_isset = YES;
}

- (BOOL) seq_idIsSet {
  return __seq_id_isset;
}

- (void) unsetSeq_id {
  [__seq_id release_stub];
  __seq_id = nil;
  __seq_id_isset = NO;
}

- (NSString *) user {
  return [[__user retain_stub] autorelease_stub];
}

- (void) setUser: (NSString *) user {
  [user retain_stub];
  [__user release_stub];
  __user = user;
  __user_isset = YES;
}

- (BOOL) userIsSet {
  return __user_isset;
}

- (void) unsetUser {
  [__user release_stub];
  __user = nil;
  __user_isset = NO;
}

- (NSString *) repo_base {
  return [[__repo_base retain_stub] autorelease_stub];
}

- (void) setRepo_base: (NSString *) repo_base {
  [repo_base retain_stub];
  [__repo_base release_stub];
  __repo_base = repo_base;
  __repo_base_isset = YES;
}

- (BOOL) repo_baseIsSet {
  return __repo_base_isset;
}

- (void) unsetRepo_base {
  [__repo_base release_stub];
  __repo_base = nil;
  __repo_base_isset = NO;
}

- (int64_t) cursor {
  return __cursor;
}

- (void) setCursor: (int64_t) cursor {
  __cursor = cursor;
  __cursor_isset = YES;
}

- (BOOL) cursorIsSet {
  return __cursor_isset;
}

- (void) unsetCursor {
  __cursor_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClient_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSeq_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRepo_base: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCursor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Connection"];
  if (__client_id_isset) {
    if (__client_id != nil) {
      [outProtocol writeFieldBeginWithName: @"client_id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __client_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__seq_id_isset) {
    if (__seq_id != nil) {
      [outProtocol writeFieldBeginWithName: @"seq_id" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __seq_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_isset) {
    if (__user != nil) {
      [outProtocol writeFieldBeginWithName: @"user" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __user];
      [outProtocol writeFieldEnd];
    }
  }
  if (__repo_base_isset) {
    if (__repo_base != nil) {
      [outProtocol writeFieldBeginWithName: @"repo_base" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __repo_base];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cursor_isset) {
    [outProtocol writeFieldBeginWithName: @"cursor" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __cursor];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Connection("];
  [ms appendString: @"client_id:"];
  [ms appendFormat: @"\"%@\"", __client_id];
  [ms appendString: @",seq_id:"];
  [ms appendFormat: @"\"%@\"", __seq_id];
  [ms appendString: @",user:"];
  [ms appendFormat: @"\"%@\"", __user];
  [ms appendString: @",repo_base:"];
  [ms appendFormat: @"\"%@\"", __repo_base];
  [ms appendString: @",cursor:"];
  [ms appendFormat: @"%qi", __cursor];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Tuple

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCells: (NSMutableArray *) cells
{
  self = [super init];
  __cells = [cells retain_stub];
  __cells_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"cells"])
  {
    __cells = [[decoder decodeObjectForKey: @"cells"] retain_stub];
    __cells_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__cells_isset)
  {
    [encoder encodeObject: __cells forKey: @"cells"];
  }
}

- (void) dealloc
{
  [__cells release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) cells {
  return [[__cells retain_stub] autorelease_stub];
}

- (void) setCells: (NSMutableArray *) cells {
  [cells retain_stub];
  [__cells release_stub];
  __cells = cells;
  __cells_isset = YES;
}

- (BOOL) cellsIsSet {
  return __cells_isset;
}

- (void) unsetCells {
  [__cells release_stub];
  __cells = nil;
  __cells_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSData * _elem2 = [inProtocol readBinary];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setCells: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Tuple"];
  if (__cells_isset) {
    if (__cells != nil) {
      [outProtocol writeFieldBeginWithName: @"cells" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__cells count]];
        int i4;
        for (i4 = 0; i4 < [__cells count]; i4++)
        {
          [outProtocol writeBinary: [__cells objectAtIndex: i4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Tuple("];
  [ms appendString: @"cells:"];
  [ms appendFormat: @"%@", __cells];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResultSet

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStatus: (BOOL) status con: (Connection *) con num_tuples: (int64_t) num_tuples num_more_tuples: (int64_t) num_more_tuples tuples: (NSMutableArray *) tuples field_names: (NSMutableArray *) field_names field_types: (NSMutableArray *) field_types
{
  self = [super init];
  __status = status;
  __status_isset = YES;
  __con = [con retain_stub];
  __con_isset = YES;
  __num_tuples = num_tuples;
  __num_tuples_isset = YES;
  __num_more_tuples = num_more_tuples;
  __num_more_tuples_isset = YES;
  __tuples = [tuples retain_stub];
  __tuples_isset = YES;
  __field_names = [field_names retain_stub];
  __field_names_isset = YES;
  __field_types = [field_types retain_stub];
  __field_types_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeBoolForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"con"])
  {
    __con = [[decoder decodeObjectForKey: @"con"] retain_stub];
    __con_isset = YES;
  }
  if ([decoder containsValueForKey: @"num_tuples"])
  {
    __num_tuples = [decoder decodeInt64ForKey: @"num_tuples"];
    __num_tuples_isset = YES;
  }
  if ([decoder containsValueForKey: @"num_more_tuples"])
  {
    __num_more_tuples = [decoder decodeInt64ForKey: @"num_more_tuples"];
    __num_more_tuples_isset = YES;
  }
  if ([decoder containsValueForKey: @"tuples"])
  {
    __tuples = [[decoder decodeObjectForKey: @"tuples"] retain_stub];
    __tuples_isset = YES;
  }
  if ([decoder containsValueForKey: @"field_names"])
  {
    __field_names = [[decoder decodeObjectForKey: @"field_names"] retain_stub];
    __field_names_isset = YES;
  }
  if ([decoder containsValueForKey: @"field_types"])
  {
    __field_types = [[decoder decodeObjectForKey: @"field_types"] retain_stub];
    __field_types_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__status_isset)
  {
    [encoder encodeBool: __status forKey: @"status"];
  }
  if (__con_isset)
  {
    [encoder encodeObject: __con forKey: @"con"];
  }
  if (__num_tuples_isset)
  {
    [encoder encodeInt64: __num_tuples forKey: @"num_tuples"];
  }
  if (__num_more_tuples_isset)
  {
    [encoder encodeInt64: __num_more_tuples forKey: @"num_more_tuples"];
  }
  if (__tuples_isset)
  {
    [encoder encodeObject: __tuples forKey: @"tuples"];
  }
  if (__field_names_isset)
  {
    [encoder encodeObject: __field_names forKey: @"field_names"];
  }
  if (__field_types_isset)
  {
    [encoder encodeObject: __field_types forKey: @"field_types"];
  }
}

- (void) dealloc
{
  [__con release_stub];
  [__tuples release_stub];
  [__field_names release_stub];
  [__field_types release_stub];
  [super dealloc_stub];
}

- (BOOL) status {
  return __status;
}

- (void) setStatus: (BOOL) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (Connection *) con {
  return [[__con retain_stub] autorelease_stub];
}

- (void) setCon: (Connection *) con {
  [con retain_stub];
  [__con release_stub];
  __con = con;
  __con_isset = YES;
}

- (BOOL) conIsSet {
  return __con_isset;
}

- (void) unsetCon {
  [__con release_stub];
  __con = nil;
  __con_isset = NO;
}

- (int64_t) num_tuples {
  return __num_tuples;
}

- (void) setNum_tuples: (int64_t) num_tuples {
  __num_tuples = num_tuples;
  __num_tuples_isset = YES;
}

- (BOOL) num_tuplesIsSet {
  return __num_tuples_isset;
}

- (void) unsetNum_tuples {
  __num_tuples_isset = NO;
}

- (int64_t) num_more_tuples {
  return __num_more_tuples;
}

- (void) setNum_more_tuples: (int64_t) num_more_tuples {
  __num_more_tuples = num_more_tuples;
  __num_more_tuples_isset = YES;
}

- (BOOL) num_more_tuplesIsSet {
  return __num_more_tuples_isset;
}

- (void) unsetNum_more_tuples {
  __num_more_tuples_isset = NO;
}

- (NSMutableArray *) tuples {
  return [[__tuples retain_stub] autorelease_stub];
}

- (void) setTuples: (NSMutableArray *) tuples {
  [tuples retain_stub];
  [__tuples release_stub];
  __tuples = tuples;
  __tuples_isset = YES;
}

- (BOOL) tuplesIsSet {
  return __tuples_isset;
}

- (void) unsetTuples {
  [__tuples release_stub];
  __tuples = nil;
  __tuples_isset = NO;
}

- (NSMutableArray *) field_names {
  return [[__field_names retain_stub] autorelease_stub];
}

- (void) setField_names: (NSMutableArray *) field_names {
  [field_names retain_stub];
  [__field_names release_stub];
  __field_names = field_names;
  __field_names_isset = YES;
}

- (BOOL) field_namesIsSet {
  return __field_names_isset;
}

- (void) unsetField_names {
  [__field_names release_stub];
  __field_names = nil;
  __field_names_isset = NO;
}

- (NSMutableArray *) field_types {
  return [[__field_types retain_stub] autorelease_stub];
}

- (void) setField_types: (NSMutableArray *) field_types {
  [field_types retain_stub];
  [__field_types release_stub];
  __field_types = field_types;
  __field_types_isset = YES;
}

- (BOOL) field_typesIsSet {
  return __field_types_isset;
}

- (void) unsetField_types {
  [__field_types release_stub];
  __field_types = nil;
  __field_types_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Connection *fieldValue = [[Connection alloc] init];
          [fieldValue read: inProtocol];
          [self setCon: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setNum_tuples: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setNum_more_tuples: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            Tuple *_elem7 = [[Tuple alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setTuples: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size8;
          [inProtocol readListBeginReturningElementType: NULL size: &_size8];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size8];
          int _i9;
          for (_i9 = 0; _i9 < _size8; ++_i9)
          {
            NSString * _elem10 = [inProtocol readString];
            [fieldValue addObject: _elem10];
          }
          [inProtocol readListEnd];
          [self setField_names: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size11;
          [inProtocol readListBeginReturningElementType: NULL size: &_size11];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size11];
          int _i12;
          for (_i12 = 0; _i12 < _size11; ++_i12)
          {
            NSString * _elem13 = [inProtocol readString];
            [fieldValue addObject: _elem13];
          }
          [inProtocol readListEnd];
          [self setField_types: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResultSet"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __status];
    [outProtocol writeFieldEnd];
  }
  if (__con_isset) {
    if (__con != nil) {
      [outProtocol writeFieldBeginWithName: @"con" type: TType_STRUCT fieldID: 2];
      [__con write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__num_tuples_isset) {
    [outProtocol writeFieldBeginWithName: @"num_tuples" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __num_tuples];
    [outProtocol writeFieldEnd];
  }
  if (__num_more_tuples_isset) {
    [outProtocol writeFieldBeginWithName: @"num_more_tuples" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __num_more_tuples];
    [outProtocol writeFieldEnd];
  }
  if (__tuples_isset) {
    if (__tuples != nil) {
      [outProtocol writeFieldBeginWithName: @"tuples" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__tuples count]];
        int i15;
        for (i15 = 0; i15 < [__tuples count]; i15++)
        {
          [[__tuples objectAtIndex: i15] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__field_names_isset) {
    if (__field_names != nil) {
      [outProtocol writeFieldBeginWithName: @"field_names" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__field_names count]];
        int i17;
        for (i17 = 0; i17 < [__field_names count]; i17++)
        {
          [outProtocol writeString: [__field_names objectAtIndex: i17]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__field_types_isset) {
    if (__field_types != nil) {
      [outProtocol writeFieldBeginWithName: @"field_types" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__field_types count]];
        int i19;
        for (i19 = 0; i19 < [__field_types count]; i19++)
        {
          [outProtocol writeString: [__field_types objectAtIndex: i19]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__status_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'status' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResultSet("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",con:"];
  [ms appendFormat: @"%@", __con];
  [ms appendString: @",num_tuples:"];
  [ms appendFormat: @"%qi", __num_tuples];
  [ms appendString: @",num_more_tuples:"];
  [ms appendFormat: @"%qi", __num_more_tuples];
  [ms appendString: @",tuples:"];
  [ms appendFormat: @"%@", __tuples];
  [ms appendString: @",field_names:"];
  [ms appendFormat: @"%@", __field_names];
  [ms appendString: @",field_types:"];
  [ms appendFormat: @"%@", __field_types];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DBException

- (id) init
{
  return [super initWithName: @"DBException" reason: @"unknown" userInfo: nil];
}

- (id) initWithError_code: (int32_t) error_code message: (NSString *) message details: (NSString *) details
{
  self = [self init];
  __error_code = error_code;
  __error_code_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  __details = [details retain_stub];
  __details_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"error_code"])
  {
    __error_code = [decoder decodeInt32ForKey: @"error_code"];
    __error_code_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"details"])
  {
    __details = [[decoder decodeObjectForKey: @"details"] retain_stub];
    __details_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__error_code_isset)
  {
    [encoder encodeInt32: __error_code forKey: @"error_code"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__details_isset)
  {
    [encoder encodeObject: __details forKey: @"details"];
  }
}

- (void) dealloc
{
  [__message release_stub];
  [__details release_stub];
  [super dealloc_stub];
}

- (int32_t) error_code {
  return __error_code;
}

- (void) setError_code: (int32_t) error_code {
  __error_code = error_code;
  __error_code_isset = YES;
}

- (BOOL) error_codeIsSet {
  return __error_code_isset;
}

- (void) unsetError_code {
  __error_code_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (NSString *) details {
  return [[__details retain_stub] autorelease_stub];
}

- (void) setDetails: (NSString *) details {
  [details retain_stub];
  [__details release_stub];
  __details = details;
  __details_isset = YES;
}

- (BOOL) detailsIsSet {
  return __details_isset;
}

- (void) unsetDetails {
  [__details release_stub];
  __details = nil;
  __details_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setError_code: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDetails: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DBException"];
  if (__error_code_isset) {
    [outProtocol writeFieldBeginWithName: @"error_code" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __error_code];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__details_isset) {
    if (__details != nil) {
      [outProtocol writeFieldBeginWithName: @"details" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __details];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DBException("];
  [ms appendString: @"error_code:"];
  [ms appendFormat: @"%i", __error_code];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",details:"];
  [ms appendFormat: @"\"%@\"", __details];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static double VERSION = 1;

@implementation datahubConstants
+ (void) initialize {
}
+ (double) VERSION{
  return VERSION;
}
@end

@interface get_version_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation get_version_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_version_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_version_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_version_result : NSObject <TBase, NSCoding> {
  double __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) double success;
#endif

- (id) init;
- (id) initWithSuccess: (double) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (double) success;
- (void) setSuccess: (double) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Get_version_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (double) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeDoubleForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeDouble: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (double) success {
  return __success;
}

- (void) setSuccess: (double) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_version_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_DOUBLE fieldID: 0];
    [outProtocol writeDouble: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_version_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%f", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface open_connection_args : NSObject <TBase, NSCoding> {
  ConnectionParams * __con_params;

  BOOL __con_params_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=con_params, setter=setCon_params:) ConnectionParams * con_params;
#endif

- (id) init;
- (id) initWithCon_params: (ConnectionParams *) con_params;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ConnectionParams *) con_params;
- (void) setCon_params: (ConnectionParams *) con_params;
#endif
- (BOOL) con_paramsIsSet;

@end

@implementation open_connection_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCon_params: (ConnectionParams *) con_params
{
  self = [super init];
  __con_params = [con_params retain_stub];
  __con_params_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"con_params"])
  {
    __con_params = [[decoder decodeObjectForKey: @"con_params"] retain_stub];
    __con_params_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__con_params_isset)
  {
    [encoder encodeObject: __con_params forKey: @"con_params"];
  }
}

- (void) dealloc
{
  [__con_params release_stub];
  [super dealloc_stub];
}

- (ConnectionParams *) con_params {
  return [[__con_params retain_stub] autorelease_stub];
}

- (void) setCon_params: (ConnectionParams *) con_params {
  [con_params retain_stub];
  [__con_params release_stub];
  __con_params = con_params;
  __con_params_isset = YES;
}

- (BOOL) con_paramsIsSet {
  return __con_params_isset;
}

- (void) unsetCon_params {
  [__con_params release_stub];
  __con_params = nil;
  __con_params_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ConnectionParams *fieldValue = [[ConnectionParams alloc] init];
          [fieldValue read: inProtocol];
          [self setCon_params: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"open_connection_args"];
  if (__con_params_isset) {
    if (__con_params != nil) {
      [outProtocol writeFieldBeginWithName: @"con_params" type: TType_STRUCT fieldID: 1];
      [__con_params write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"open_connection_args("];
  [ms appendString: @"con_params:"];
  [ms appendFormat: @"%@", __con_params];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Open_connection_result : NSObject <TBase, NSCoding> {
  Connection * __success;
  DBException * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Connection * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) DBException * ex;
#endif

- (id) init;
- (id) initWithSuccess: (Connection *) success ex: (DBException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Connection *) success;
- (void) setSuccess: (Connection *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (DBException *) ex;
- (void) setEx: (DBException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Open_connection_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Connection *) success ex: (DBException *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (Connection *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Connection *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (DBException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (DBException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Connection *fieldValue = [[Connection alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          DBException *fieldValue = [[DBException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Open_connection_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Open_connection_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface create_repo_args : NSObject <TBase, NSCoding> {
  Connection * __con;
  NSString * __repo_name;

  BOOL __con_isset;
  BOOL __repo_name_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=con, setter=setCon:) Connection * con;
@property (nonatomic, retain, getter=repo_name, setter=setRepo_name:) NSString * repo_name;
#endif

- (id) init;
- (id) initWithCon: (Connection *) con repo_name: (NSString *) repo_name;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Connection *) con;
- (void) setCon: (Connection *) con;
#endif
- (BOOL) conIsSet;

#if !__has_feature(objc_arc)
- (NSString *) repo_name;
- (void) setRepo_name: (NSString *) repo_name;
#endif
- (BOOL) repo_nameIsSet;

@end

@implementation create_repo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCon: (Connection *) con repo_name: (NSString *) repo_name
{
  self = [super init];
  __con = [con retain_stub];
  __con_isset = YES;
  __repo_name = [repo_name retain_stub];
  __repo_name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"con"])
  {
    __con = [[decoder decodeObjectForKey: @"con"] retain_stub];
    __con_isset = YES;
  }
  if ([decoder containsValueForKey: @"repo_name"])
  {
    __repo_name = [[decoder decodeObjectForKey: @"repo_name"] retain_stub];
    __repo_name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__con_isset)
  {
    [encoder encodeObject: __con forKey: @"con"];
  }
  if (__repo_name_isset)
  {
    [encoder encodeObject: __repo_name forKey: @"repo_name"];
  }
}

- (void) dealloc
{
  [__con release_stub];
  [__repo_name release_stub];
  [super dealloc_stub];
}

- (Connection *) con {
  return [[__con retain_stub] autorelease_stub];
}

- (void) setCon: (Connection *) con {
  [con retain_stub];
  [__con release_stub];
  __con = con;
  __con_isset = YES;
}

- (BOOL) conIsSet {
  return __con_isset;
}

- (void) unsetCon {
  [__con release_stub];
  __con = nil;
  __con_isset = NO;
}

- (NSString *) repo_name {
  return [[__repo_name retain_stub] autorelease_stub];
}

- (void) setRepo_name: (NSString *) repo_name {
  [repo_name retain_stub];
  [__repo_name release_stub];
  __repo_name = repo_name;
  __repo_name_isset = YES;
}

- (BOOL) repo_nameIsSet {
  return __repo_name_isset;
}

- (void) unsetRepo_name {
  [__repo_name release_stub];
  __repo_name = nil;
  __repo_name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Connection *fieldValue = [[Connection alloc] init];
          [fieldValue read: inProtocol];
          [self setCon: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRepo_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"create_repo_args"];
  if (__con_isset) {
    if (__con != nil) {
      [outProtocol writeFieldBeginWithName: @"con" type: TType_STRUCT fieldID: 1];
      [__con write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__repo_name_isset) {
    if (__repo_name != nil) {
      [outProtocol writeFieldBeginWithName: @"repo_name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __repo_name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"create_repo_args("];
  [ms appendString: @"con:"];
  [ms appendFormat: @"%@", __con];
  [ms appendString: @",repo_name:"];
  [ms appendFormat: @"\"%@\"", __repo_name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Create_repo_result : NSObject <TBase, NSCoding> {
  ResultSet * __success;
  DBException * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResultSet * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) DBException * ex;
#endif

- (id) init;
- (id) initWithSuccess: (ResultSet *) success ex: (DBException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResultSet *) success;
- (void) setSuccess: (ResultSet *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (DBException *) ex;
- (void) setEx: (DBException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Create_repo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResultSet *) success ex: (DBException *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (ResultSet *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResultSet *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (DBException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (DBException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResultSet *fieldValue = [[ResultSet alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          DBException *fieldValue = [[DBException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Create_repo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Create_repo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface list_repos_args : NSObject <TBase, NSCoding> {
  Connection * __con;

  BOOL __con_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=con, setter=setCon:) Connection * con;
#endif

- (id) init;
- (id) initWithCon: (Connection *) con;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Connection *) con;
- (void) setCon: (Connection *) con;
#endif
- (BOOL) conIsSet;

@end

@implementation list_repos_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCon: (Connection *) con
{
  self = [super init];
  __con = [con retain_stub];
  __con_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"con"])
  {
    __con = [[decoder decodeObjectForKey: @"con"] retain_stub];
    __con_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__con_isset)
  {
    [encoder encodeObject: __con forKey: @"con"];
  }
}

- (void) dealloc
{
  [__con release_stub];
  [super dealloc_stub];
}

- (Connection *) con {
  return [[__con retain_stub] autorelease_stub];
}

- (void) setCon: (Connection *) con {
  [con retain_stub];
  [__con release_stub];
  __con = con;
  __con_isset = YES;
}

- (BOOL) conIsSet {
  return __con_isset;
}

- (void) unsetCon {
  [__con release_stub];
  __con = nil;
  __con_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Connection *fieldValue = [[Connection alloc] init];
          [fieldValue read: inProtocol];
          [self setCon: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"list_repos_args"];
  if (__con_isset) {
    if (__con != nil) {
      [outProtocol writeFieldBeginWithName: @"con" type: TType_STRUCT fieldID: 1];
      [__con write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"list_repos_args("];
  [ms appendString: @"con:"];
  [ms appendFormat: @"%@", __con];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface List_repos_result : NSObject <TBase, NSCoding> {
  ResultSet * __success;
  DBException * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResultSet * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) DBException * ex;
#endif

- (id) init;
- (id) initWithSuccess: (ResultSet *) success ex: (DBException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResultSet *) success;
- (void) setSuccess: (ResultSet *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (DBException *) ex;
- (void) setEx: (DBException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation List_repos_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResultSet *) success ex: (DBException *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (ResultSet *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResultSet *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (DBException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (DBException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResultSet *fieldValue = [[ResultSet alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          DBException *fieldValue = [[DBException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"List_repos_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"List_repos_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface delete_repo_args : NSObject <TBase, NSCoding> {
  Connection * __con;
  NSString * __repo_name;
  BOOL __force_if_non_empty;

  BOOL __con_isset;
  BOOL __repo_name_isset;
  BOOL __force_if_non_empty_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=con, setter=setCon:) Connection * con;
@property (nonatomic, retain, getter=repo_name, setter=setRepo_name:) NSString * repo_name;
@property (nonatomic, getter=force_if_non_empty, setter=setForce_if_non_empty:) BOOL force_if_non_empty;
#endif

- (id) init;
- (id) initWithCon: (Connection *) con repo_name: (NSString *) repo_name force_if_non_empty: (BOOL) force_if_non_empty;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Connection *) con;
- (void) setCon: (Connection *) con;
#endif
- (BOOL) conIsSet;

#if !__has_feature(objc_arc)
- (NSString *) repo_name;
- (void) setRepo_name: (NSString *) repo_name;
#endif
- (BOOL) repo_nameIsSet;

#if !__has_feature(objc_arc)
- (BOOL) force_if_non_empty;
- (void) setForce_if_non_empty: (BOOL) force_if_non_empty;
#endif
- (BOOL) force_if_non_emptyIsSet;

@end

@implementation delete_repo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCon: (Connection *) con repo_name: (NSString *) repo_name force_if_non_empty: (BOOL) force_if_non_empty
{
  self = [super init];
  __con = [con retain_stub];
  __con_isset = YES;
  __repo_name = [repo_name retain_stub];
  __repo_name_isset = YES;
  __force_if_non_empty = force_if_non_empty;
  __force_if_non_empty_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"con"])
  {
    __con = [[decoder decodeObjectForKey: @"con"] retain_stub];
    __con_isset = YES;
  }
  if ([decoder containsValueForKey: @"repo_name"])
  {
    __repo_name = [[decoder decodeObjectForKey: @"repo_name"] retain_stub];
    __repo_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"force_if_non_empty"])
  {
    __force_if_non_empty = [decoder decodeBoolForKey: @"force_if_non_empty"];
    __force_if_non_empty_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__con_isset)
  {
    [encoder encodeObject: __con forKey: @"con"];
  }
  if (__repo_name_isset)
  {
    [encoder encodeObject: __repo_name forKey: @"repo_name"];
  }
  if (__force_if_non_empty_isset)
  {
    [encoder encodeBool: __force_if_non_empty forKey: @"force_if_non_empty"];
  }
}

- (void) dealloc
{
  [__con release_stub];
  [__repo_name release_stub];
  [super dealloc_stub];
}

- (Connection *) con {
  return [[__con retain_stub] autorelease_stub];
}

- (void) setCon: (Connection *) con {
  [con retain_stub];
  [__con release_stub];
  __con = con;
  __con_isset = YES;
}

- (BOOL) conIsSet {
  return __con_isset;
}

- (void) unsetCon {
  [__con release_stub];
  __con = nil;
  __con_isset = NO;
}

- (NSString *) repo_name {
  return [[__repo_name retain_stub] autorelease_stub];
}

- (void) setRepo_name: (NSString *) repo_name {
  [repo_name retain_stub];
  [__repo_name release_stub];
  __repo_name = repo_name;
  __repo_name_isset = YES;
}

- (BOOL) repo_nameIsSet {
  return __repo_name_isset;
}

- (void) unsetRepo_name {
  [__repo_name release_stub];
  __repo_name = nil;
  __repo_name_isset = NO;
}

- (BOOL) force_if_non_empty {
  return __force_if_non_empty;
}

- (void) setForce_if_non_empty: (BOOL) force_if_non_empty {
  __force_if_non_empty = force_if_non_empty;
  __force_if_non_empty_isset = YES;
}

- (BOOL) force_if_non_emptyIsSet {
  return __force_if_non_empty_isset;
}

- (void) unsetForce_if_non_empty {
  __force_if_non_empty_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Connection *fieldValue = [[Connection alloc] init];
          [fieldValue read: inProtocol];
          [self setCon: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRepo_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setForce_if_non_empty: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"delete_repo_args"];
  if (__con_isset) {
    if (__con != nil) {
      [outProtocol writeFieldBeginWithName: @"con" type: TType_STRUCT fieldID: 1];
      [__con write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__repo_name_isset) {
    if (__repo_name != nil) {
      [outProtocol writeFieldBeginWithName: @"repo_name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __repo_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__force_if_non_empty_isset) {
    [outProtocol writeFieldBeginWithName: @"force_if_non_empty" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __force_if_non_empty];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"delete_repo_args("];
  [ms appendString: @"con:"];
  [ms appendFormat: @"%@", __con];
  [ms appendString: @",repo_name:"];
  [ms appendFormat: @"\"%@\"", __repo_name];
  [ms appendString: @",force_if_non_empty:"];
  [ms appendFormat: @"%i", __force_if_non_empty];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Delete_repo_result : NSObject <TBase, NSCoding> {
  ResultSet * __success;
  DBException * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResultSet * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) DBException * ex;
#endif

- (id) init;
- (id) initWithSuccess: (ResultSet *) success ex: (DBException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResultSet *) success;
- (void) setSuccess: (ResultSet *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (DBException *) ex;
- (void) setEx: (DBException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Delete_repo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResultSet *) success ex: (DBException *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (ResultSet *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResultSet *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (DBException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (DBException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResultSet *fieldValue = [[ResultSet alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          DBException *fieldValue = [[DBException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Delete_repo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Delete_repo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface list_tables_args : NSObject <TBase, NSCoding> {
  Connection * __con;
  NSString * __repo_name;

  BOOL __con_isset;
  BOOL __repo_name_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=con, setter=setCon:) Connection * con;
@property (nonatomic, retain, getter=repo_name, setter=setRepo_name:) NSString * repo_name;
#endif

- (id) init;
- (id) initWithCon: (Connection *) con repo_name: (NSString *) repo_name;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Connection *) con;
- (void) setCon: (Connection *) con;
#endif
- (BOOL) conIsSet;

#if !__has_feature(objc_arc)
- (NSString *) repo_name;
- (void) setRepo_name: (NSString *) repo_name;
#endif
- (BOOL) repo_nameIsSet;

@end

@implementation list_tables_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCon: (Connection *) con repo_name: (NSString *) repo_name
{
  self = [super init];
  __con = [con retain_stub];
  __con_isset = YES;
  __repo_name = [repo_name retain_stub];
  __repo_name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"con"])
  {
    __con = [[decoder decodeObjectForKey: @"con"] retain_stub];
    __con_isset = YES;
  }
  if ([decoder containsValueForKey: @"repo_name"])
  {
    __repo_name = [[decoder decodeObjectForKey: @"repo_name"] retain_stub];
    __repo_name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__con_isset)
  {
    [encoder encodeObject: __con forKey: @"con"];
  }
  if (__repo_name_isset)
  {
    [encoder encodeObject: __repo_name forKey: @"repo_name"];
  }
}

- (void) dealloc
{
  [__con release_stub];
  [__repo_name release_stub];
  [super dealloc_stub];
}

- (Connection *) con {
  return [[__con retain_stub] autorelease_stub];
}

- (void) setCon: (Connection *) con {
  [con retain_stub];
  [__con release_stub];
  __con = con;
  __con_isset = YES;
}

- (BOOL) conIsSet {
  return __con_isset;
}

- (void) unsetCon {
  [__con release_stub];
  __con = nil;
  __con_isset = NO;
}

- (NSString *) repo_name {
  return [[__repo_name retain_stub] autorelease_stub];
}

- (void) setRepo_name: (NSString *) repo_name {
  [repo_name retain_stub];
  [__repo_name release_stub];
  __repo_name = repo_name;
  __repo_name_isset = YES;
}

- (BOOL) repo_nameIsSet {
  return __repo_name_isset;
}

- (void) unsetRepo_name {
  [__repo_name release_stub];
  __repo_name = nil;
  __repo_name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Connection *fieldValue = [[Connection alloc] init];
          [fieldValue read: inProtocol];
          [self setCon: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRepo_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"list_tables_args"];
  if (__con_isset) {
    if (__con != nil) {
      [outProtocol writeFieldBeginWithName: @"con" type: TType_STRUCT fieldID: 1];
      [__con write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__repo_name_isset) {
    if (__repo_name != nil) {
      [outProtocol writeFieldBeginWithName: @"repo_name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __repo_name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"list_tables_args("];
  [ms appendString: @"con:"];
  [ms appendFormat: @"%@", __con];
  [ms appendString: @",repo_name:"];
  [ms appendFormat: @"\"%@\"", __repo_name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface List_tables_result : NSObject <TBase, NSCoding> {
  ResultSet * __success;
  DBException * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResultSet * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) DBException * ex;
#endif

- (id) init;
- (id) initWithSuccess: (ResultSet *) success ex: (DBException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResultSet *) success;
- (void) setSuccess: (ResultSet *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (DBException *) ex;
- (void) setEx: (DBException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation List_tables_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResultSet *) success ex: (DBException *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (ResultSet *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResultSet *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (DBException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (DBException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResultSet *fieldValue = [[ResultSet alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          DBException *fieldValue = [[DBException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"List_tables_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"List_tables_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_schema_args : NSObject <TBase, NSCoding> {
  Connection * __con;
  NSString * __table_name;

  BOOL __con_isset;
  BOOL __table_name_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=con, setter=setCon:) Connection * con;
@property (nonatomic, retain, getter=table_name, setter=setTable_name:) NSString * table_name;
#endif

- (id) init;
- (id) initWithCon: (Connection *) con table_name: (NSString *) table_name;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Connection *) con;
- (void) setCon: (Connection *) con;
#endif
- (BOOL) conIsSet;

#if !__has_feature(objc_arc)
- (NSString *) table_name;
- (void) setTable_name: (NSString *) table_name;
#endif
- (BOOL) table_nameIsSet;

@end

@implementation get_schema_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCon: (Connection *) con table_name: (NSString *) table_name
{
  self = [super init];
  __con = [con retain_stub];
  __con_isset = YES;
  __table_name = [table_name retain_stub];
  __table_name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"con"])
  {
    __con = [[decoder decodeObjectForKey: @"con"] retain_stub];
    __con_isset = YES;
  }
  if ([decoder containsValueForKey: @"table_name"])
  {
    __table_name = [[decoder decodeObjectForKey: @"table_name"] retain_stub];
    __table_name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__con_isset)
  {
    [encoder encodeObject: __con forKey: @"con"];
  }
  if (__table_name_isset)
  {
    [encoder encodeObject: __table_name forKey: @"table_name"];
  }
}

- (void) dealloc
{
  [__con release_stub];
  [__table_name release_stub];
  [super dealloc_stub];
}

- (Connection *) con {
  return [[__con retain_stub] autorelease_stub];
}

- (void) setCon: (Connection *) con {
  [con retain_stub];
  [__con release_stub];
  __con = con;
  __con_isset = YES;
}

- (BOOL) conIsSet {
  return __con_isset;
}

- (void) unsetCon {
  [__con release_stub];
  __con = nil;
  __con_isset = NO;
}

- (NSString *) table_name {
  return [[__table_name retain_stub] autorelease_stub];
}

- (void) setTable_name: (NSString *) table_name {
  [table_name retain_stub];
  [__table_name release_stub];
  __table_name = table_name;
  __table_name_isset = YES;
}

- (BOOL) table_nameIsSet {
  return __table_name_isset;
}

- (void) unsetTable_name {
  [__table_name release_stub];
  __table_name = nil;
  __table_name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Connection *fieldValue = [[Connection alloc] init];
          [fieldValue read: inProtocol];
          [self setCon: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTable_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_schema_args"];
  if (__con_isset) {
    if (__con != nil) {
      [outProtocol writeFieldBeginWithName: @"con" type: TType_STRUCT fieldID: 1];
      [__con write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__table_name_isset) {
    if (__table_name != nil) {
      [outProtocol writeFieldBeginWithName: @"table_name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __table_name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_schema_args("];
  [ms appendString: @"con:"];
  [ms appendFormat: @"%@", __con];
  [ms appendString: @",table_name:"];
  [ms appendFormat: @"\"%@\"", __table_name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_schema_result : NSObject <TBase, NSCoding> {
  ResultSet * __success;
  DBException * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResultSet * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) DBException * ex;
#endif

- (id) init;
- (id) initWithSuccess: (ResultSet *) success ex: (DBException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResultSet *) success;
- (void) setSuccess: (ResultSet *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (DBException *) ex;
- (void) setEx: (DBException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Get_schema_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResultSet *) success ex: (DBException *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (ResultSet *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResultSet *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (DBException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (DBException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResultSet *fieldValue = [[ResultSet alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          DBException *fieldValue = [[DBException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_schema_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_schema_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface execute_sql_args : NSObject <TBase, NSCoding> {
  Connection * __con;
  NSString * __query;
  NSMutableArray * __query_params;

  BOOL __con_isset;
  BOOL __query_isset;
  BOOL __query_params_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=con, setter=setCon:) Connection * con;
@property (nonatomic, retain, getter=query, setter=setQuery:) NSString * query;
@property (nonatomic, retain, getter=query_params, setter=setQuery_params:) NSMutableArray * query_params;
#endif

- (id) init;
- (id) initWithCon: (Connection *) con query: (NSString *) query query_params: (NSMutableArray *) query_params;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Connection *) con;
- (void) setCon: (Connection *) con;
#endif
- (BOOL) conIsSet;

#if !__has_feature(objc_arc)
- (NSString *) query;
- (void) setQuery: (NSString *) query;
#endif
- (BOOL) queryIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) query_params;
- (void) setQuery_params: (NSMutableArray *) query_params;
#endif
- (BOOL) query_paramsIsSet;

@end

@implementation execute_sql_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCon: (Connection *) con query: (NSString *) query query_params: (NSMutableArray *) query_params
{
  self = [super init];
  __con = [con retain_stub];
  __con_isset = YES;
  __query = [query retain_stub];
  __query_isset = YES;
  __query_params = [query_params retain_stub];
  __query_params_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"con"])
  {
    __con = [[decoder decodeObjectForKey: @"con"] retain_stub];
    __con_isset = YES;
  }
  if ([decoder containsValueForKey: @"query"])
  {
    __query = [[decoder decodeObjectForKey: @"query"] retain_stub];
    __query_isset = YES;
  }
  if ([decoder containsValueForKey: @"query_params"])
  {
    __query_params = [[decoder decodeObjectForKey: @"query_params"] retain_stub];
    __query_params_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__con_isset)
  {
    [encoder encodeObject: __con forKey: @"con"];
  }
  if (__query_isset)
  {
    [encoder encodeObject: __query forKey: @"query"];
  }
  if (__query_params_isset)
  {
    [encoder encodeObject: __query_params forKey: @"query_params"];
  }
}

- (void) dealloc
{
  [__con release_stub];
  [__query release_stub];
  [__query_params release_stub];
  [super dealloc_stub];
}

- (Connection *) con {
  return [[__con retain_stub] autorelease_stub];
}

- (void) setCon: (Connection *) con {
  [con retain_stub];
  [__con release_stub];
  __con = con;
  __con_isset = YES;
}

- (BOOL) conIsSet {
  return __con_isset;
}

- (void) unsetCon {
  [__con release_stub];
  __con = nil;
  __con_isset = NO;
}

- (NSString *) query {
  return [[__query retain_stub] autorelease_stub];
}

- (void) setQuery: (NSString *) query {
  [query retain_stub];
  [__query release_stub];
  __query = query;
  __query_isset = YES;
}

- (BOOL) queryIsSet {
  return __query_isset;
}

- (void) unsetQuery {
  [__query release_stub];
  __query = nil;
  __query_isset = NO;
}

- (NSMutableArray *) query_params {
  return [[__query_params retain_stub] autorelease_stub];
}

- (void) setQuery_params: (NSMutableArray *) query_params {
  [query_params retain_stub];
  [__query_params release_stub];
  __query_params = query_params;
  __query_params_isset = YES;
}

- (BOOL) query_paramsIsSet {
  return __query_params_isset;
}

- (void) unsetQuery_params {
  [__query_params release_stub];
  __query_params = nil;
  __query_params_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Connection *fieldValue = [[Connection alloc] init];
          [fieldValue read: inProtocol];
          [self setCon: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQuery: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            NSData * _elem22 = [inProtocol readBinary];
            [fieldValue addObject: _elem22];
          }
          [inProtocol readListEnd];
          [self setQuery_params: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"execute_sql_args"];
  if (__con_isset) {
    if (__con != nil) {
      [outProtocol writeFieldBeginWithName: @"con" type: TType_STRUCT fieldID: 1];
      [__con write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__query_isset) {
    if (__query != nil) {
      [outProtocol writeFieldBeginWithName: @"query" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __query];
      [outProtocol writeFieldEnd];
    }
  }
  if (__query_params_isset) {
    if (__query_params != nil) {
      [outProtocol writeFieldBeginWithName: @"query_params" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__query_params count]];
        int i24;
        for (i24 = 0; i24 < [__query_params count]; i24++)
        {
          [outProtocol writeBinary: [__query_params objectAtIndex: i24]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"execute_sql_args("];
  [ms appendString: @"con:"];
  [ms appendFormat: @"%@", __con];
  [ms appendString: @",query:"];
  [ms appendFormat: @"\"%@\"", __query];
  [ms appendString: @",query_params:"];
  [ms appendFormat: @"%@", __query_params];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Execute_sql_result : NSObject <TBase, NSCoding> {
  ResultSet * __success;
  DBException * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResultSet * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) DBException * ex;
#endif

- (id) init;
- (id) initWithSuccess: (ResultSet *) success ex: (DBException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResultSet *) success;
- (void) setSuccess: (ResultSet *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (DBException *) ex;
- (void) setEx: (DBException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Execute_sql_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ResultSet *) success ex: (DBException *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (ResultSet *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResultSet *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (DBException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (DBException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ResultSet *fieldValue = [[ResultSet alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          DBException *fieldValue = [[DBException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Execute_sql_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Execute_sql_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface close_connection_args : NSObject <TBase, NSCoding> {
  Connection * __con;

  BOOL __con_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=con, setter=setCon:) Connection * con;
#endif

- (id) init;
- (id) initWithCon: (Connection *) con;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Connection *) con;
- (void) setCon: (Connection *) con;
#endif
- (BOOL) conIsSet;

@end

@implementation close_connection_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCon: (Connection *) con
{
  self = [super init];
  __con = [con retain_stub];
  __con_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"con"])
  {
    __con = [[decoder decodeObjectForKey: @"con"] retain_stub];
    __con_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__con_isset)
  {
    [encoder encodeObject: __con forKey: @"con"];
  }
}

- (void) dealloc
{
  [__con release_stub];
  [super dealloc_stub];
}

- (Connection *) con {
  return [[__con retain_stub] autorelease_stub];
}

- (void) setCon: (Connection *) con {
  [con retain_stub];
  [__con release_stub];
  __con = con;
  __con_isset = YES;
}

- (BOOL) conIsSet {
  return __con_isset;
}

- (void) unsetCon {
  [__con release_stub];
  __con = nil;
  __con_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Connection *fieldValue = [[Connection alloc] init];
          [fieldValue read: inProtocol];
          [self setCon: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"close_connection_args"];
  if (__con_isset) {
    if (__con != nil) {
      [outProtocol writeFieldBeginWithName: @"con" type: TType_STRUCT fieldID: 1];
      [__con write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"close_connection_args("];
  [ms appendString: @"con:"];
  [ms appendFormat: @"%@", __con];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Close_connection_result : NSObject <TBase, NSCoding> {
  BOOL __success;
  DBException * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
@property (nonatomic, retain, getter=ex, setter=setEx:) DBException * ex;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success ex: (DBException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (DBException *) ex;
- (void) setEx: (DBException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Close_connection_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success ex: (DBException *) ex
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__ex release_stub];
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (DBException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (DBException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          DBException *fieldValue = [[DBException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Close_connection_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Close_connection_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DataHubClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_get_version
{
  [outProtocol writeMessageBeginWithName: @"get_version" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_version_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (double) recv_get_version
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_version_result * result = [[[Get_version_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_version failed: unknown result"];
}

- (double) get_version
{
  [self send_get_version];
  return [self recv_get_version];
}

- (void) send_open_connection: (ConnectionParams *) con_params
{
  [outProtocol writeMessageBeginWithName: @"open_connection" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"open_connection_args"];
  if (con_params != nil)  {
    [outProtocol writeFieldBeginWithName: @"con_params" type: TType_STRUCT fieldID: 1];
    [con_params write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Connection *) recv_open_connection
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Open_connection_result * result = [[[Open_connection_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"open_connection failed: unknown result"];
}

- (Connection *) open_connection: (ConnectionParams *) con_params
{
  [self send_open_connection : con_params];
  return [self recv_open_connection];
}

- (void) send_create_repo: (Connection *) con repo_name: (NSString *) repo_name
{
  [outProtocol writeMessageBeginWithName: @"create_repo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"create_repo_args"];
  if (con != nil)  {
    [outProtocol writeFieldBeginWithName: @"con" type: TType_STRUCT fieldID: 1];
    [con write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (repo_name != nil)  {
    [outProtocol writeFieldBeginWithName: @"repo_name" type: TType_STRING fieldID: 2];
    [outProtocol writeString: repo_name];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ResultSet *) recv_create_repo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Create_repo_result * result = [[[Create_repo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"create_repo failed: unknown result"];
}

- (ResultSet *) create_repo: (Connection *) con repo_name: (NSString *) repo_name
{
  [self send_create_repo : con repo_name: repo_name];
  return [self recv_create_repo];
}

- (void) send_list_repos: (Connection *) con
{
  [outProtocol writeMessageBeginWithName: @"list_repos" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"list_repos_args"];
  if (con != nil)  {
    [outProtocol writeFieldBeginWithName: @"con" type: TType_STRUCT fieldID: 1];
    [con write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ResultSet *) recv_list_repos
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  List_repos_result * result = [[[List_repos_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"list_repos failed: unknown result"];
}

- (ResultSet *) list_repos: (Connection *) con
{
  [self send_list_repos : con];
  return [self recv_list_repos];
}

- (void) send_delete_repo: (Connection *) con repo_name: (NSString *) repo_name force_if_non_empty: (BOOL) force_if_non_empty
{
  [outProtocol writeMessageBeginWithName: @"delete_repo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"delete_repo_args"];
  if (con != nil)  {
    [outProtocol writeFieldBeginWithName: @"con" type: TType_STRUCT fieldID: 1];
    [con write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (repo_name != nil)  {
    [outProtocol writeFieldBeginWithName: @"repo_name" type: TType_STRING fieldID: 2];
    [outProtocol writeString: repo_name];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"force_if_non_empty" type: TType_BOOL fieldID: 3];
  [outProtocol writeBool: force_if_non_empty];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ResultSet *) recv_delete_repo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Delete_repo_result * result = [[[Delete_repo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"delete_repo failed: unknown result"];
}

- (ResultSet *) delete_repo: (Connection *) con repo_name: (NSString *) repo_name force_if_non_empty: (BOOL) force_if_non_empty
{
  [self send_delete_repo : con repo_name: repo_name force_if_non_empty: force_if_non_empty];
  return [self recv_delete_repo];
}

- (void) send_list_tables: (Connection *) con repo_name: (NSString *) repo_name
{
  [outProtocol writeMessageBeginWithName: @"list_tables" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"list_tables_args"];
  if (con != nil)  {
    [outProtocol writeFieldBeginWithName: @"con" type: TType_STRUCT fieldID: 1];
    [con write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (repo_name != nil)  {
    [outProtocol writeFieldBeginWithName: @"repo_name" type: TType_STRING fieldID: 2];
    [outProtocol writeString: repo_name];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ResultSet *) recv_list_tables
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  List_tables_result * result = [[[List_tables_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"list_tables failed: unknown result"];
}

- (ResultSet *) list_tables: (Connection *) con repo_name: (NSString *) repo_name
{
  [self send_list_tables : con repo_name: repo_name];
  return [self recv_list_tables];
}

- (void) send_get_schema: (Connection *) con table_name: (NSString *) table_name
{
  [outProtocol writeMessageBeginWithName: @"get_schema" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_schema_args"];
  if (con != nil)  {
    [outProtocol writeFieldBeginWithName: @"con" type: TType_STRUCT fieldID: 1];
    [con write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (table_name != nil)  {
    [outProtocol writeFieldBeginWithName: @"table_name" type: TType_STRING fieldID: 2];
    [outProtocol writeString: table_name];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ResultSet *) recv_get_schema
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_schema_result * result = [[[Get_schema_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_schema failed: unknown result"];
}

- (ResultSet *) get_schema: (Connection *) con table_name: (NSString *) table_name
{
  [self send_get_schema : con table_name: table_name];
  return [self recv_get_schema];
}

- (void) send_execute_sql: (Connection *) con query: (NSString *) query query_params: (NSMutableArray *) query_params
{
  [outProtocol writeMessageBeginWithName: @"execute_sql" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"execute_sql_args"];
  if (con != nil)  {
    [outProtocol writeFieldBeginWithName: @"con" type: TType_STRUCT fieldID: 1];
    [con write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (query != nil)  {
    [outProtocol writeFieldBeginWithName: @"query" type: TType_STRING fieldID: 2];
    [outProtocol writeString: query];
    [outProtocol writeFieldEnd];
  }
  if (query_params != nil)  {
    [outProtocol writeFieldBeginWithName: @"query_params" type: TType_LIST fieldID: 3];
    {
      [outProtocol writeListBeginWithElementType: TType_STRING size: [query_params count]];
      int i26;
      for (i26 = 0; i26 < [query_params count]; i26++)
      {
        [outProtocol writeBinary: [query_params objectAtIndex: i26]];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ResultSet *) recv_execute_sql
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Execute_sql_result * result = [[[Execute_sql_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"execute_sql failed: unknown result"];
}

- (ResultSet *) execute_sql: (Connection *) con query: (NSString *) query query_params: (NSMutableArray *) query_params
{
  [self send_execute_sql : con query: query query_params: query_params];
  return [self recv_execute_sql];
}

- (void) send_close_connection: (Connection *) con
{
  [outProtocol writeMessageBeginWithName: @"close_connection" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"close_connection_args"];
  if (con != nil)  {
    [outProtocol writeFieldBeginWithName: @"con" type: TType_STRUCT fieldID: 1];
    [con write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_close_connection
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Close_connection_result * result = [[[Close_connection_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"close_connection failed: unknown result"];
}

- (BOOL) close_connection: (Connection *) con
{
  [self send_close_connection : con];
  return [self recv_close_connection];
}

@end

@implementation DataHubProcessor

- (id) initWithDataHub: (id <DataHub>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_get_version_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_version"];
  }
  {
    SEL s = @selector(process_open_connection_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"open_connection"];
  }
  {
    SEL s = @selector(process_create_repo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"create_repo"];
  }
  {
    SEL s = @selector(process_list_repos_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"list_repos"];
  }
  {
    SEL s = @selector(process_delete_repo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"delete_repo"];
  }
  {
    SEL s = @selector(process_list_tables_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"list_tables"];
  }
  {
    SEL s = @selector(process_get_schema_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_schema"];
  }
  {
    SEL s = @selector(process_execute_sql_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"execute_sql"];
  }
  {
    SEL s = @selector(process_close_connection_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"close_connection"];
  }
  return self;
}

- (id<DataHub>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_get_version_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_version_args * args = [[get_version_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_version_result * result = [[Get_version_result alloc] init];
  [result setSuccess: [mService get_version]];
  [outProtocol writeMessageBeginWithName: @"get_version"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_open_connection_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  open_connection_args * args = [[open_connection_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Open_connection_result * result = [[Open_connection_result alloc] init];
  [result setSuccess: [mService open_connection: [args con_params]]];
  [outProtocol writeMessageBeginWithName: @"open_connection"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_create_repo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  create_repo_args * args = [[create_repo_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Create_repo_result * result = [[Create_repo_result alloc] init];
  [result setSuccess: [mService create_repo: [args con] repo_name: [args repo_name]]];
  [outProtocol writeMessageBeginWithName: @"create_repo"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_list_repos_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  list_repos_args * args = [[list_repos_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  List_repos_result * result = [[List_repos_result alloc] init];
  [result setSuccess: [mService list_repos: [args con]]];
  [outProtocol writeMessageBeginWithName: @"list_repos"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_delete_repo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  delete_repo_args * args = [[delete_repo_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Delete_repo_result * result = [[Delete_repo_result alloc] init];
  [result setSuccess: [mService delete_repo: [args con] repo_name: [args repo_name] force_if_non_empty: [args force_if_non_empty]]];
  [outProtocol writeMessageBeginWithName: @"delete_repo"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_list_tables_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  list_tables_args * args = [[list_tables_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  List_tables_result * result = [[List_tables_result alloc] init];
  [result setSuccess: [mService list_tables: [args con] repo_name: [args repo_name]]];
  [outProtocol writeMessageBeginWithName: @"list_tables"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_schema_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_schema_args * args = [[get_schema_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_schema_result * result = [[Get_schema_result alloc] init];
  [result setSuccess: [mService get_schema: [args con] table_name: [args table_name]]];
  [outProtocol writeMessageBeginWithName: @"get_schema"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_execute_sql_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  execute_sql_args * args = [[execute_sql_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Execute_sql_result * result = [[Execute_sql_result alloc] init];
  [result setSuccess: [mService execute_sql: [args con] query: [args query] query_params: [args query_params]]];
  [outProtocol writeMessageBeginWithName: @"execute_sql"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_close_connection_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  close_connection_args * args = [[close_connection_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Close_connection_result * result = [[Close_connection_result alloc] init];
  [result setSuccess: [mService close_connection: [args con]]];
  [outProtocol writeMessageBeginWithName: @"close_connection"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

